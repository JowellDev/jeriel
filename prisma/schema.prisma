datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MEMBER
  SUPER_ADMIN
  TRIBE_MANAGER
  DEPARTMENT_MANAGER
  HONOR_FAMILY_MANAGER
}

model User {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @db.VarChar(255)
  phone     String   @unique @db.VarChar(255)
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  location  String?
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deletedAt DateTime?

  password Password?

  churchId    String?
  church      Church? @relation("members", fields: [churchId], references: [id])
  churchAdmin Church? @relation("churchAdmin")

  honorFamilyManager HonorFamily? @relation("honorFamilyManager")

  tribeId      String? @db.VarChar(255)
  tribe        Tribe?  @relation("TribeMembers", fields: [tribeId], references: [id], onDelete: Cascade)
  tribeManager Tribe?  @relation("TribeManager")

  honorFamilyId String?      @db.VarChar(255)
  honorFamily   HonorFamily? @relation("HonorFamilyMembers", fields: [honorFamilyId], references: [id])

  departmentId      String?     @db.VarChar(255)
  department        Department? @relation("DepartmentMembers", fields: [departmentId], references: [id])
  managedDepartment Department? @relation("DepartmentManager")

  archiveRequestsMade     ArchiveRequest[] @relation("requester")
  archiveRequestsReceived ArchiveRequest[] @relation("usersToArchive")

  @@index([name])
  @@index([phone])
  @@index([tribeId])
  @@index([churchId])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([departmentId])
  @@index([honorFamilyId])
  @@map("users")
}

model Password {
  hash   String @db.VarChar(255)
  userId String @unique @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("passwords")
}

model Verification {
  id        String   @id @default(cuid()) @db.VarChar(255)
  algorithm String   @db.VarChar(255)
  secret    String   @db.VarChar(255)
  phone     String   @db.VarChar(255)
  digits    Int
  period    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([phone])
  @@index([expiresAt])
  @@map("verifications")
}

model Church {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @unique @db.VarChar(255)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId        String           @unique @db.VarChar(255)
  admin          User             @relation("churchAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members        User[]           @relation("members")
  tribes         Tribe[]
  honorFamilies  HonorFamily[]
  departments    Department[]
  ArchiveRequest ArchiveRequest[]

  @@index([name])
  @@index([adminId])
  @@index([createdAt])
  @@map("churches")
}

model Tribe {
  id            String    @id @default(cuid()) @db.VarChar(255)
  name          String    @db.VarChar(255)
  churchId      String    @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  church        Church    @relation(fields: [churchId], references: [id], onDelete: Cascade)
  members       User[]    @relation("TribeMembers")
  managerId     String    @unique @db.VarChar(255)
  manager       User      @relation("TribeManager", fields: [managerId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([managerId])
  @@index([createdAt])
  @@map("tribes")
}

model HonorFamily {
  id       String @id @default(cuid()) @db.VarChar(255)
  name     String @unique @db.VarChar(255)
  location String @db.VarChar(255)

  churchId String @db.VarChar(255)
  church   Church @relation(fields: [churchId], references: [id])

  managerId String @unique @db.VarChar(225)
  manager   User   @relation("honorFamilyManager", fields: [managerId], references: [id])

  members User[] @relation("HonorFamilyMembers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([managerId])
  @@index([churchId])
  @@index([createdAt])
  @@map("honor_families")
}

model Department {
  id   String @id @default(cuid()) @db.VarChar(255)
  name String @unique @db.VarChar(255)

  managerId String @unique @db.VarChar(255)
  manager   User   @relation("DepartmentManager", fields: [managerId], references: [id])

  members User[] @relation("DepartmentMembers")

  churchId String @db.VarChar(255)
  church   Church @relation(fields: [churchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([managerId])
  @@index([createdAt])
  @@index([churchId])
  @@map("departments")
}

model ArchiveRequest {
  id String @id @default(cuid()) @db.VarChar(255)

  churchId String @db.VarChar(255)
  church   Church @relation(fields: [churchId], references: [id])

  requesterId String @db.VarChar(255)
  requester   User   @relation("requester", fields: [requesterId], references: [id])

  usersToArchive User[] @relation("usersToArchive")

  origin String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([churchId])
  @@index([requesterId])
  @@map("archive_requests")
}
