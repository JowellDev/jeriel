datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MEMBER
  SUPER_ADMIN
  TRIBE_MANAGER
  DEPARTMENT_MANAGER
  HONOR_FAMILY_MANAGER
}

enum AttendanceReportEntity {
  TRIBE
  DEPARTMENT
  HONOR_FAMILY
}

model User {
  id                          String           @id @default(cuid()) @db.VarChar(255)
  name                        String           @db.VarChar(255)
  phone                       String           @unique @db.VarChar(255)
  isAdmin                     Boolean          @default(false)
  isActive                    Boolean          @default(true)
  location                    String?
  roles                       Role[]
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  deletedAt                   DateTime?
  integrationDate             integrationDate?

  churchId                    String?
  church                      Church? @relation("members", fields: [churchId], references: [id])
  churchAdmin                 Church? @relation("churchAdmin")

  tribeId                     String? @db.VarChar(255)
  tribe                       Tribe?  @relation("TribeMembers", fields: [tribeId], references: [id], onDelete: Cascade)
  tribeManager                Tribe?  @relation("TribeManager")

  honorFamilyId               String?      @db.VarChar(255)
  honorFamily                 HonorFamily? @relation("HonorFamilyMembers", fields: [honorFamilyId], references: [id])
  honorFamilyManager          HonorFamily? @relation("honorFamilyManager")

  departmentId                String?     @db.VarChar(255)
  department                  Department? @relation("DepartmentMembers", fields: [departmentId], references: [id])
  managedDepartment           Department? @relation("DepartmentManager")

  archiveRequestsMade         ArchiveRequest[] @relation("requester")
  archiveRequestsReceived     ArchiveRequest[] @relation("usersToArchive")

  attendances                 Attendance[]
  reports                     AttendanceReport[]

  notifications             Notification[]

  password                    Password?

  @@index([name])
  @@index([phone])
  @@index([tribeId])
  @@index([churchId])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([departmentId])
  @@index([honorFamilyId])
  @@map("users")
}

model Password {
  hash   String @db.VarChar(255)
  userId String @unique @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("passwords")
}

model Verification {
  id        String   @id @default(cuid()) @db.VarChar(255)
  algorithm String   @db.VarChar(255)
  secret    String   @db.VarChar(255)
  phone     String   @db.VarChar(255)
  digits    Int
  period    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([phone])
  @@index([expiresAt])
  @@map("verifications")
}

model Church {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @unique @db.VarChar(255)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId        String           @unique @db.VarChar(255)
  admin          User             @relation("churchAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members        User[]           @relation("members")
  tribes         Tribe[]
  honorFamilies  HonorFamily[]
  departments    Department[]
  ArchiveRequest ArchiveRequest[]

  @@index([name])
  @@index([isActive])
  @@index([adminId])
  @@index([createdAt])
  @@map("churches")
}

model Tribe {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @db.VarChar(255)
  churchId  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  church            Church             @relation(fields: [churchId], references: [id], onDelete: Cascade)
  managerId         String             @unique @db.VarChar(255)
  manager           User               @relation("TribeManager", fields: [managerId], references: [id], onDelete: Cascade)
  members           User[]             @relation("TribeMembers")
  services          Service[]
  attendanceReports AttendanceReport[]

  @@index([name])
  @@index([managerId])
  @@index([createdAt])
  @@map("tribes")
}

model HonorFamily {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @unique @db.VarChar(255)
  location  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  churchId          String             @db.VarChar(255)
  church            Church             @relation(fields: [churchId], references: [id])
  managerId         String             @unique @db.VarChar(225)
  manager           User               @relation("honorFamilyManager", fields: [managerId], references: [id])
  members           User[]             @relation("HonorFamilyMembers")
  attendanceReports AttendanceReport[]

  @@index([name])
  @@index([managerId])
  @@index([churchId])
  @@index([createdAt])
  @@map("honor_families")
}

model Department {
  id        String   @id @default(cuid()) @db.VarChar(255)
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managerId String    @unique @db.VarChar(255)
  manager   User      @relation("DepartmentManager", fields: [managerId], references: [id])
  churchId  String    @db.VarChar(255)
  church    Church    @relation(fields: [churchId], references: [id])
  members   User[]    @relation("DepartmentMembers")
  services  Service[]

  attendanceReports AttendanceReport[]

  @@index([name])
  @@index([managerId])
  @@index([createdAt])
  @@index([churchId])
  @@map("departments")
}

model ArchiveRequest {
  id        String   @id @default(cuid()) @db.VarChar(255)
  origin    String
  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  churchId       String @db.VarChar(255)
  church         Church @relation(fields: [churchId], references: [id])
  requesterId    String @db.VarChar(255)
  requester      User   @relation("requester", fields: [requesterId], references: [id])
  usersToArchive User[] @relation("usersToArchive")

  @@index([createdAt])
  @@index([churchId])
  @@index([requesterId])
  @@map("archive_requests")
}

model Service {
  id        String   @id @default(cuid()) @db.VarChar(255)
  from      DateTime
  to        DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tribeId      String?     @db.VarChar(255)
  tribe        Tribe?      @relation(fields: [tribeId], references: [id], onDelete: Cascade)
  departmentId String?     @db.VarChar(255)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@index([from])
  @@index([to])
  @@index([createdAt])
  @@map("services")
}

model integrationDate {
  id              String    @id @default(cuid()) @db.VarChar(255)
  tribeDate       DateTime?
  familyDate      DateTime?
  departementDate DateTime?
  userId          String    @unique @db.VarChar(255)
  user            User?     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([tribeDate])
  @@index([familyDate])
  @@index([departementDate])
  @@index([userId])
  @@index([createdAt])
  @@map("integration_dates")
}

model AttendanceReport {
  id              String                 @id @default(cuid()) @db.VarChar(255)
  entity          AttendanceReportEntity
  comment         String?
  createdAt       DateTime               @default(now())

  departmentId    String?      @db.VarChar(255)
  department      Department?  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  tribeId         String?      @db.VarChar(255)
  tribe           Tribe?       @relation(fields: [tribeId], references: [id], onDelete: Cascade)
  honorFamilyId   String?      @db.VarChar(255)
  honorFamily     HonorFamily? @relation(fields: [honorFamilyId], references: [id], onDelete: Cascade)
  attendances     Attendance[]

  submitterId     String
  submitter       User         @relation(fields: [submitterId], references: [id])

  @@index([entity])
  @@index([createdAt])
  @@map("attendance_reports")
}

model Attendance {
  id                String   @id @default(cuid()) @db.VarChar(255)
  date              DateTime
  inChurch          Boolean  @default(false)
  inService         Boolean?
  inMeeting         Boolean?
  createdAt         DateTime @default(now())
  hasConflict       Boolean @default(false)

  memberId          String
  member            User             @relation(fields: [memberId], references: [id])
  reportId          String           @db.VarChar(255)
  report            AttendanceReport @relation(fields: [reportId], references: [id])

  @@index([date])
  @@index([inChurch])
  @@index([inService])
  @@index([inMeeting])
  @@index([createdAt])
  @@index([hasConflict])
  @@map("attendances")
}


model Notification {
  id      String @id @default(cuid()) @db.VarChar(50)
  title   String
  content String
  url     String

  createdAt DateTime  @default(now())
  seen      Boolean   @default(false)
  readAt    DateTime?

  userId String @db.VarChar(50)
  user   User   @relation(fields: [userId], references: [id])

  @@index([createdAt], name: "notification_created_at_idx")
  @@index([userId], name: "notification_userId_idx")
  @@map("notifications")
}